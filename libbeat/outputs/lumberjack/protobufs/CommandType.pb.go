// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CommandType.proto

package protobufs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommandType int32

const (
	// method handles
	CommandType_ACK         CommandType = 1
	CommandType_BAD_ENVELOP CommandType = 2
	CommandType_BLOCK_FULL  CommandType = 3
	// Used for registering with parent in the hierarchy
	CommandType_REGISTER_DC CommandType = 4
	CommandType_REGISTER_DW CommandType = 5
	// Used for finding out who to send the log data.
	// Start with Master. Master sends to the right DC
	// DC sends to the first DW
	// When DW is full, it sends the client back to DC and then DC sends it to the
	// next DW
	CommandType_getIPReport       CommandType = 6
	CommandType_WRITE_LOG         CommandType = 7
	CommandType_WriteToNextWorker CommandType = 8
	CommandType_ADD_LOG           CommandType = 9
	CommandType_QUERY_LOG         CommandType = 10
	CommandType_WriteEvents       CommandType = 11
	CommandType_WriteMetrics      CommandType = 12
	// From DomainWorker to DomainWorker
	CommandType_ReplicateLog CommandType = 13
	// This is an advanced topic of being able to create partitions within a cluster
	// Not expected in first version
	// From DomainController
	CommandType_RegisterSubCluster CommandType = 14
	// From Master
	CommandType_AreYouAlive    CommandType = 15
	CommandType_IsSubClusterOk CommandType = 16
	// From Client
	CommandType_GetWorkerList                        CommandType = 20
	CommandType_GetControllerList                    CommandType = 21
	CommandType_GetClusterDetails                    CommandType = 22
	CommandType_GetAllWorkers                        CommandType = 23
	CommandType_GetAllControlers                     CommandType = 24
	CommandType_GetClusterStats                      CommandType = 25
	CommandType_GetWorkerStats                       CommandType = 26
	CommandType_GetMeMyBuddies                       CommandType = 27
	CommandType_IAmReadyForBusiness                  CommandType = 28
	CommandType_GoToNextWorker                       CommandType = 29
	CommandType_TailRequest                          CommandType = 30
	CommandType_TrackingRequestForOneNameSpace       CommandType = 31
	CommandType_TrackingRequestForMultipleNameSpaces CommandType = 32
	CommandType_ReferenceQueryRequest                CommandType = 33
	CommandType_SIMPLE_QUERY                         CommandType = 34
	CommandType_LeftJoinQueryRequest                 CommandType = 35
	CommandType_METRIC_QUERY                         CommandType = 36
	CommandType_AddNameSpace                         CommandType = 37
	CommandType_RemoveNameSpace                      CommandType = 38
	CommandType_GetNameSpace                         CommandType = 39
)

var CommandType_name = map[int32]string{
	1:  "ACK",
	2:  "BAD_ENVELOP",
	3:  "BLOCK_FULL",
	4:  "REGISTER_DC",
	5:  "REGISTER_DW",
	6:  "getIPReport",
	7:  "WRITE_LOG",
	8:  "WriteToNextWorker",
	9:  "ADD_LOG",
	10: "QUERY_LOG",
	11: "WriteEvents",
	12: "WriteMetrics",
	13: "ReplicateLog",
	14: "RegisterSubCluster",
	15: "AreYouAlive",
	16: "IsSubClusterOk",
	20: "GetWorkerList",
	21: "GetControllerList",
	22: "GetClusterDetails",
	23: "GetAllWorkers",
	24: "GetAllControlers",
	25: "GetClusterStats",
	26: "GetWorkerStats",
	27: "GetMeMyBuddies",
	28: "IAmReadyForBusiness",
	29: "GoToNextWorker",
	30: "TailRequest",
	31: "TrackingRequestForOneNameSpace",
	32: "TrackingRequestForMultipleNameSpaces",
	33: "ReferenceQueryRequest",
	34: "SIMPLE_QUERY",
	35: "LeftJoinQueryRequest",
	36: "METRIC_QUERY",
	37: "AddNameSpace",
	38: "RemoveNameSpace",
	39: "GetNameSpace",
}

var CommandType_value = map[string]int32{
	"ACK":                                  1,
	"BAD_ENVELOP":                          2,
	"BLOCK_FULL":                           3,
	"REGISTER_DC":                          4,
	"REGISTER_DW":                          5,
	"getIPReport":                          6,
	"WRITE_LOG":                            7,
	"WriteToNextWorker":                    8,
	"ADD_LOG":                              9,
	"QUERY_LOG":                            10,
	"WriteEvents":                          11,
	"WriteMetrics":                         12,
	"ReplicateLog":                         13,
	"RegisterSubCluster":                   14,
	"AreYouAlive":                          15,
	"IsSubClusterOk":                       16,
	"GetWorkerList":                        20,
	"GetControllerList":                    21,
	"GetClusterDetails":                    22,
	"GetAllWorkers":                        23,
	"GetAllControlers":                     24,
	"GetClusterStats":                      25,
	"GetWorkerStats":                       26,
	"GetMeMyBuddies":                       27,
	"IAmReadyForBusiness":                  28,
	"GoToNextWorker":                       29,
	"TailRequest":                          30,
	"TrackingRequestForOneNameSpace":       31,
	"TrackingRequestForMultipleNameSpaces": 32,
	"ReferenceQueryRequest":                33,
	"SIMPLE_QUERY":                         34,
	"LeftJoinQueryRequest":                 35,
	"METRIC_QUERY":                         36,
	"AddNameSpace":                         37,
	"RemoveNameSpace":                      38,
	"GetNameSpace":                         39,
}

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (x *CommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandType_value, data, "CommandType")
	if err != nil {
		return err
	}
	*x = CommandType(value)
	return nil
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_062a13376468a274, []int{0}
}

func init() {
	proto.RegisterEnum("com.tutsut.proto.CommandType", CommandType_name, CommandType_value)
}

func init() { proto.RegisterFile("CommandType.proto", fileDescriptor_062a13376468a274) }

var fileDescriptor_062a13376468a274 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xed, 0x6e, 0xda, 0x30,
	0x14, 0x86, 0xb5, 0x75, 0x1d, 0xab, 0x29, 0x70, 0x70, 0xa1, 0x1f, 0xfb, 0xe8, 0xb6, 0xae, 0xfb,
	0xd0, 0x7e, 0xf4, 0x1e, 0x42, 0x08, 0x28, 0x6b, 0x02, 0xd4, 0xa4, 0x43, 0xfd, 0x85, 0xb2, 0xe4,
	0x14, 0x59, 0x24, 0x71, 0x66, 0x3b, 0x68, 0x5c, 0xef, 0x6e, 0x64, 0x72, 0x48, 0x47, 0x51, 0xff,
	0x25, 0x8f, 0x9e, 0xf3, 0xfa, 0xb5, 0x0f, 0x69, 0xdb, 0x22, 0x4d, 0xc3, 0x2c, 0x0e, 0xd6, 0x39,
	0x5e, 0xe5, 0x52, 0x68, 0x41, 0x21, 0x12, 0xe9, 0x95, 0x2e, 0xb4, 0x2a, 0xf4, 0x86, 0x7c, 0xff,
	0xbb, 0x4f, 0xea, 0x8f, 0x3c, 0x5a, 0x23, 0x7b, 0x96, 0x7d, 0x0d, 0xcf, 0x68, 0x8b, 0xd4, 0x7b,
	0x56, 0x7f, 0xee, 0x8c, 0x7e, 0x3a, 0xde, 0x78, 0x02, 0xcf, 0x69, 0x93, 0x90, 0x9e, 0x37, 0xb6,
	0xaf, 0xe7, 0x83, 0x5b, 0xcf, 0x83, 0x3d, 0x23, 0x30, 0x67, 0xe8, 0x4e, 0x03, 0x87, 0xcd, 0xfb,
	0x36, 0xbc, 0xd8, 0x05, 0x33, 0xd8, 0x37, 0x60, 0x81, 0xda, 0x9d, 0x30, 0xcc, 0x85, 0xd4, 0xf0,
	0x92, 0x36, 0xc8, 0xc1, 0x8c, 0xb9, 0x81, 0x33, 0xf7, 0xc6, 0x43, 0xa8, 0xd1, 0x2e, 0x69, 0xcf,
	0x24, 0xd7, 0x18, 0x88, 0x11, 0xfe, 0xd1, 0x33, 0x21, 0x97, 0x28, 0xe1, 0x15, 0xad, 0x93, 0x9a,
	0xd5, 0xef, 0x97, 0xce, 0x81, 0x19, 0xb9, 0xb9, 0x75, 0xd8, 0x5d, 0xf9, 0x4b, 0x4c, 0x64, 0x39,
	0xe2, 0xac, 0x30, 0xd3, 0x0a, 0xea, 0x14, 0xc8, 0x61, 0x09, 0x7c, 0xd4, 0x92, 0x47, 0x0a, 0x0e,
	0x0d, 0x61, 0x98, 0x27, 0x3c, 0x0a, 0x35, 0x7a, 0x62, 0x01, 0x0d, 0x7a, 0x4c, 0x28, 0xc3, 0x05,
	0x57, 0x1a, 0xe5, 0xb4, 0xf8, 0x65, 0x27, 0x85, 0xf9, 0x82, 0xa6, 0x09, 0xb3, 0x24, 0xde, 0x89,
	0xc2, 0x4a, 0xf8, 0x0a, 0xa1, 0x45, 0x29, 0x69, 0xba, 0x6a, 0xab, 0x8c, 0x97, 0x00, 0xb4, 0x4d,
	0x1a, 0x43, 0xac, 0xca, 0x79, 0x5c, 0x69, 0xe8, 0x98, 0xde, 0x43, 0xd4, 0xb6, 0xc8, 0xb4, 0x14,
	0x49, 0x52, 0xe1, 0xee, 0x03, 0xde, 0xcc, 0xf6, 0x51, 0x87, 0x3c, 0x51, 0x70, 0x5c, 0x05, 0x58,
	0x49, 0xb2, 0xc9, 0x50, 0x70, 0x42, 0x3b, 0x04, 0x36, 0xa8, 0xca, 0x30, 0xf4, 0x94, 0x1e, 0x91,
	0xd6, 0x76, 0x7e, 0xaa, 0x43, 0xad, 0xe0, 0xcc, 0x54, 0xfa, 0x7f, 0xfc, 0x86, 0xbd, 0xae, 0x98,
	0x8f, 0xfe, 0xba, 0x57, 0xc4, 0x31, 0x47, 0x05, 0x6f, 0xe8, 0x09, 0x39, 0x72, 0xad, 0x94, 0x61,
	0x18, 0xaf, 0x07, 0x42, 0xf6, 0x0a, 0xc5, 0x33, 0x54, 0x0a, 0xde, 0x96, 0xb2, 0xd8, 0x79, 0xe1,
	0x77, 0xe6, 0xe2, 0x41, 0xc8, 0x13, 0x86, 0xbf, 0x0b, 0x54, 0x1a, 0xce, 0xe9, 0x05, 0x39, 0x0f,
	0x64, 0x18, 0x2d, 0x79, 0xb6, 0xa8, 0xe0, 0x40, 0xc8, 0x71, 0x86, 0xa3, 0x30, 0xc5, 0x69, 0x1e,
	0x46, 0x08, 0xef, 0xe9, 0x37, 0x72, 0xf9, 0xd4, 0xf1, 0x8b, 0x44, 0xf3, 0x3c, 0xd9, 0x8a, 0x0a,
	0x3e, 0xd0, 0x33, 0xd2, 0x65, 0x78, 0x8f, 0x12, 0xb3, 0x08, 0x6f, 0x0a, 0x94, 0xeb, 0x87, 0x83,
	0x3e, 0x9a, 0xe5, 0x4c, 0x5d, 0x7f, 0xe2, 0x39, 0xf3, 0x72, 0xab, 0x70, 0x41, 0x4f, 0x49, 0xc7,
	0xc3, 0x7b, 0xfd, 0x43, 0xf0, 0x6c, 0xc7, 0xfd, 0x64, 0x5c, 0xdf, 0x09, 0x98, 0x6b, 0x57, 0xee,
	0xa5, 0x21, 0x56, 0x1c, 0x6f, 0x4b, 0x7d, 0x36, 0x6f, 0xc6, 0x30, 0x15, 0xab, 0x47, 0x4d, 0xbf,
	0x18, 0x6d, 0x88, 0x7a, 0x4b, 0xbe, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x85, 0x33, 0xe1,
	0x0b, 0x03, 0x00, 0x00,
}
